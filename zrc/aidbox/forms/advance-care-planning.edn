{ns aidbox.forms.advance-care-planning
 import #{zenbox aidbox.sdc}

 AdvanceCarePlanningDocument
 {:zen/tags #{zen/schema aidbox.sdc/doc}
  :zen/desc "Advance Care Planning"
  :type zen/map
  :confirms #{aidbox.sdc/Document}
  :keys {:enabled           {:text "**Does patient agree to discuss advance care planning?**"
                             :type zen/boolean
                             :code [{:code "310302007"
                                     :system "http://snomed.ct"
                                     :display "Advance directive discussed with patient"}]}
         :advance-directive {:text "Do you have an advance directive/POLST/MOLST?"
                             :type zen/boolean
                             :code [{:code "425392003"
                                     :system "http://snomed.ct"
                                     :display "Active advance directive"}]}
         :patient-goals     {:text "What are the patient's goals of care?"
                             :type zen/string}
         :comments          {:text "Comments"
                             :type zen/string}}}

 AdvanceCarePlanningLayout
 {:zen/tags #{aidbox.sdc/Layout}
  :document AdvanceCarePlanningDocument
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/col
   :children
   [{:bind [:enabled]}
    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/col
       :sdc/display-when (get-in [:enabled])
       :children
       [{:bind [:advance-directive]}
        {:bind [:patient-goals]}
        {:bind [:comments]}]}]}]}}

 AdvanceCarePlanningLaunch
 {:zen/tags #{aidbox.sdc/Launch}
  :document AdvanceCarePlanningDocument
  :params {:encounter-id {:type zen/string}}
  :populate-engine aidbox.sdc/LispPopulate
  :populate {:author    (get-in [:ctx :user])
             :encounter {:id (get-in [:params :encounter-id]) :resourceType "Encounter"}
             :patient   (sql {:select [:#> :resource [:subject]]
                              :from :Encounter
                              :where [:= :id (get-in [:params :encounter-id])]})}}

 AdvanceCarePlanningFinalize
 {:zen/tags #{aidbox.sdc/Finalize zen/schema}
  :document AdvanceCarePlanningDocument
  :export-engine aidbox.sdc/LispExport
  :create [{:template aidbox.sdc/gen-observation-template :params {:path [:enabled]}}
           {:template aidbox.sdc/gen-observation-template :params {:path [:advance-directive]}}]}

 AdvanceCarePlanningForm
 {:zen/tags #{aidbox.sdc/Form}
  :title    "Advance Care Planning"
  :document AdvanceCarePlanningDocument
  :layout   AdvanceCarePlanningLayout
  :launch   AdvanceCarePlanningLaunch
  :finalize AdvanceCarePlanningFinalize}}
