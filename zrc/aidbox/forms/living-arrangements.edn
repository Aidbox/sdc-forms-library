{ns aidbox.forms.living-arrangements
 import #{zenbox aidbox.sdc aidbox.sdc.fhir}

 LivingArrangementsDocument
 {:zen/tags #{zen/schema aidbox.sdc/doc aidbox.sdc/rules},
  :zen/desc "Living Arrangements",
  :type zen/map,
  :confirms #{aidbox.sdc/Document},
  :keys {:living      {:text "Where do you live?",
                       :enum [{:value {:display "House/Apartment",    :code "PR", :system "http://terminology.hl7.org/CodeSystem/v3-LivingArrangement"}}
                              {:value {:display "Assisted Living",    :code "SL", :system "http://terminology.hl7.org/CodeSystem/v3-LivingArrangement"}}
                              {:value {:display "Nursing Facility",   :code "N", :system "http://terminology.hl7.org/CodeSystem/v3-LivingArrangement"}}
                              {:value {:display "Skilled Nursing",    :code "X", :system "http://terminology.hl7.org/CodeSystem/v3-LivingArrangement"}}
                              {:value {:display "Retirement Complex", :code "R", :system "http://terminology.hl7.org/CodeSystem/v3-LivingArrangement"}}]}

         :living-with {:text "Who do you live with?",
                       :enum [{:value {:display "Lives alone", :code "LA6255-9", :system "https://loinc.org"}}
                              {:value {:display "With spouse or significant other", :code "LA6450-6", :system "https://loinc.org"}}
                              {:value {:display "With other family member", :code "LA6447-2", :system "https://loinc.org"}}
                              {:value {:display "With a friend", :code "LA6444-9", :system "https://loinc.org"}}
                              {:value {:display "Home Health AidWith paid help (other than home care agency staff)",
                                       :code "LA6449-8", :system "https://loinc.org"}}
                              {:value {:display "With other than above", :code "LA6448-0", :system "https://loinc.org"}}]
                       :code [{:code "46468-5"  :system "http://loinc.org"
                               :display "Current living arrangement"}]},

         :living-other-with                    {:text "Specify Other" :type zen/string},
         :pets                                 {:text "Pets in home?" :type zen/boolean},
         :pets-comment-required                {:text "Comment required?" :type zen/boolean}
         :pets-comment                         {:text "Comment" :type zen/string,},
         :weapons                              {:text "Weapons in home?" :type zen/boolean},
         :weapons-comment-required             {:text "Comment required?" :type zen/boolean}
         :weapons-comment                      {:text "Comment" :type zen/string},
         :weapons-secure                       {:text "Is/are weapon(s) secured?" :type zen/boolean},
         :weapons-secure-comment               {:text "Comment" :type zen/string},
         :elevator-wheelchair                  {:text "Elevator/wheelchair accessible?" :type zen/boolean},
         :elevator-wheelchair-comment-required {:text "Comment required?" :type zen/boolean}
         :elevator-wheelchair-comment          {:text "Comment" :type zen/string}}}

 LivingArrangementsLayout
 {:zen/tags #{aidbox.sdc/Layout aidbox.sdc/rules}
  :document LivingArrangementsDocument
  :engine aidbox.sdc/Hiccup
  :sdc/rules {:enable-other-with (= (get-in [:living-with :code]) "LA6448-0")}
  :layout
  {:type aidbox.sdc/col,
   :children
   [{:bind [:living]}
    {:bind [:living-with]}
    {:sdc/display-when (get :enable-other-with)
     :bind [:living-other-with]}
    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/fields
       :children
       [{:type aidbox.sdc/row
         :children [{:bind [:pets]}
                    {:bind [:pets-comment-required]
                     :sdc/display-when (get :pets)}]}
        {:type aidbox.sdc/row
         :sdc/display-when (get :pets-comment-required)
         :children
         [{:bind [:pets-comment]}]}]}

      {:type aidbox.sdc/fields
       :children
       [{:type aidbox.sdc/row
         :children [{:bind [:weapons]}
                    {:bind [:weapons-comment-required]
                     :sdc/display-when (get :weapons)}]}
        {:type aidbox.sdc/fields
         :sdc/display-when (get :weapons)
         :children
         [{:type aidbox.sdc/row
           :children [{:bind [:weapons-secure]}]}]}
        {:type aidbox.sdc/row
         :sdc/display-when (get :weapons-comment-required)
         :children [{:bind [:weapons-comment]}]}]}

      {:type aidbox.sdc/fields
       :children
       [{:type aidbox.sdc/row
         :children [{:bind [:elevator-wheelchair]}
                    {:bind [:elevator-wheelchair-comment-required]
                     :sdc/display-when (get :elevator-wheelchair)}]}
        {:type aidbox.sdc/row
         :sdc/display-when (get :elevator-wheelchair-comment-required)
         :children [{:bind [:elevator-wheelchair-comment]}]}]}]}]}}

 LivingArrangementsLaunch
 {:zen/tags #{aidbox.sdc/Launch}
  :document LivingArrangementsDocument
  :params {:encounter-id {:type zen/string}}
  :populate-engine aidbox.sdc/LispPopulate
  :populate {:author    (get-in [:ctx :user])
             :encounter {:id (get-in [:params :encounter-id]) :resourceType "Encounter"}
             :patient   (sql {:select [:#> :resource [:subject]]
                              :from :Encounter
                              :where [:= :id (get-in [:params :encounter-id])]})}}

LivingArrangementsFinalize
{:zen/tags #{aidbox.sdc/Finalize zen/schema}
 :document LivingArrangementsDocument
 :export-engine aidbox.sdc/LispExport
 :create [{:template aidbox.sdc/gen-observation-template :params {:path [:living-with]}}]}

LivingArrangementsForm
{:zen/tags #{aidbox.sdc/Form}
 :title    "Living Arrangements"
 :document LivingArrangementsDocument
 :layout   LivingArrangementsLayout
 :launch   LivingArrangementsLaunch
 :finalize LivingArrangementsFinalize}}
