{ns aidbox.forms.past-surgical-history
 import #{zenbox aidbox.sdc aidbox.sdc.fhir aidbox.forms.vs.past-history-of-procedure}

 PastSurgicalHistoryDocument
 {:zen/tags #{zen/schema aidbox.sdc/doc aidbox.sdc/rules}
  :zen/desc "Past Surgical History"
  :type zen/map
  :confirms #{aidbox.sdc/Document}
  :keys {:patient {:type zen/map
                   :keys {:birthDate {:type zen/string}
                          :gender {:type zen/string}}}
         :procedures {:type zen/vector,
                      :every {:type zen/map,
                              :require #{:code}
                              :keys {:id {:type zen/string}
                                     :code {:text "Surgical Procedure"
                                            :confirms #{aidbox.sdc.fhir/coding}
                                            :sdc/options aidbox.sdc.options/valueset
                                            :valueset "forms.past-history-of-procedure-vs"}
                                     :surgeryDateTime {:text "Surgery date (optional)" :type zen/date}
                                     :notes {:text "Comments" :type zen/string}}}}}}

 ProcedureInplaceForm
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/col
   :children
   [{:bind [:code]}
    {:type aidbox.sdc/row
     :children [{:bind [:surgeryDateTime]}
                {:type aidbox.sdc/col}]}
    {:bind [:notes]}]}}

 PastSurgicalHistoryLayout
 {:zen/tags #{aidbox.sdc/Layout}
  :document PastSurgicalHistoryDocument
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/grid-editor
   :bind [:procedures]
   :columns [{:label "Surgical Procedure"
              :type aidbox.sdc/label
              :bind [:code :display]}
             {:label "Date"
              :type aidbox.sdc/label
              :bind [:surgeryDateTime]}]
   :row-actions [{:type aidbox.sdc/grid-edit-button :label "Edit" :sdc/display-when (not (= (get-in [:code :code]) "43209959"))}]
   :new-form {:form-ref ProcedureInplaceForm}
   :edit-form {:form-ref ProcedureInplaceForm}}}

 PastSurgicalHistoryLaunch
 {:zen/tags #{aidbox.sdc/Launch}
  :document PastSurgicalHistoryDocument
  :params {:encounter-id {:type zen/string}}
  :populate-engine aidbox.sdc/LispPopulate
  :populate (let [patient-id (sql {:select [:#> :resource [:subject :id]]
                                   :from :Encounter
                                   :where [:= :id (get-in [:params :encounter-id])]})]
              {:author    (get-in [:ctx :user])
               :encounter {:id (get-in [:params :encounter-id]) :resourceType "Encounter"}
               :patient   (sql {:select {:patient ^:pg/obj {:id :id
                                                            :resourceType "Patient"
                                                            :gender [:#> :resource [:gender]]
                                                            :birthDate [:#> :resource [:birthDate]]}}
                                :from :Patient
                                :where [:= :id patient-id]})
               :procedures (sql* {:select  {:condition
                                            ^:pg/obj {:id :id
                                                      :code [:#> :resource [:code :coding 0]]
                                                      :surgeryDateTime [:#> :resource [:performed, :dateTime]]
                                                      :notes [:#>> :resource [:note 0 :text]]}}
                                  :from :Procedure
                                  :where [:and
                                          [:= [:#>> :resource [:subject :id]] patient-id]
                                          [:= [:#>> :resource [:category :coding 0 :code]] "387713003"]
                                          [:= [:->> :resource :status] "completed"]]})})}

 PastSurgicalHistoryFinalize
 {:zen/tags #{aidbox.sdc/Finalize zen/schema}
  :document PastSurgicalHistoryDocument
  :export-engine aidbox.sdc/LispExport
  :patch [(for [j (sql* {:select  {:id :id}
                         :from :Procedure
                         :where [:and (when (> (count (get-in [:procedures])) 0)
                                        [:not [:in :id [:pg/params-list
                                                        (for [i (get-in [:procedures])]
                                                          (str (get i :id)))]]])
                                 [:= [:->> :resource :status] "completed"]
                                 [:= [:#>> :resource [:subject :id]] (get-in [:patient :id])]]})]
            {:resourceType "Procedure"
             :id j
             :status "entered-in-error"})]
  :create [(for [i (get-in [:procedures])]
             {:id (get-in i [:id])
              :status "completed"
              :category {:coding [{:code "387713003" :system "http://snomed.info/sct"}]
                         :text "Surgical procedure"}
              :code {:coding [(get i :code)]}
              :performed {:dateTime (get-in i [:surgeryDateTime])}
              :subject (select-keys (get :patient) [:id :resourceType])
              :encounter (get :encounter)
              :note (when (get-in i [:notes])
                      [{:text (get-in i [:notes])}])
              :resourceType "Procedure"})]}

 PastSurgicalHistoryForm
 {:zen/tags #{aidbox.sdc/Form}
  :title    "Past Surgical History"
  :document PastSurgicalHistoryDocument
  :layout   PastSurgicalHistoryLayout
  :launch   PastSurgicalHistoryLaunch
  :finalize PastSurgicalHistoryFinalize}}
