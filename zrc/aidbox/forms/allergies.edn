{ns aidbox.forms.allergies
 import #{zenbox aidbox.sdc
          aidbox.sdc.options
          aidbox.sdc.fhir
          aidbox.forms.vs.rxnorm-clinical-drug-ingredient
          aidbox.forms.vs.snomed-common-environmental-substances-for-allergy-and-intolerance-documentation
          aidbox.forms.vs.snomed-food-allergen}


 AllergiesDocument
 {:zen/tags #{zen/schema aidbox.sdc/doc aidbox.sdc/rules},
  :zen/desc "Allergies",
  :type zen/map,
  :confirms #{aidbox.sdc/Document},
  :keys {:allergies
         {:type zen/vector,
          :every {:type zen/map,
                  :require #{:type},
                  :keys {:id {:type zen/string},
                         :status {:type zen/string,
                                  :sdc/default-value "active"},
                         :substance {:text "Agent/substance",
                                     :confirms #{aidbox.sdc.fhir/coding},
                                     :sdc/options aidbox.sdc.options/valueset
                                     :valueset (cond
                                                 (= (get-in [:type :code]) "418634005")
                                                 "forms.rxnorm-clinical-drug-ingredient-vs"

                                                 (= (get-in [:type :code]) "414285001")
                                                 "forms.snomed-food-allergen-vs"

                                                 (= (get-in [:type :code]) "426232007")
                                                 "forms.snomed-common-environmental-substances-for-allergy-and-intolerance-documentation-vs"
                                                 :else "empty")},
                         :type {:text "Type",
                                :confirms #{aidbox.sdc.fhir/coding},
                                :enum [{:value {:display "Drug", :code "418634005", :system "http://snomed.ct"}}
                                       {:value {:display "Food", :code "414285001", :system "http://snomed.ct"}}
                                       {:value {:display "Enviornmental", :code "426232007", :system "http://snomed.ct"}}]},
                         :reaction {:type zen/vector,
                                    :zen/desc "Reaction",
                                    :every {:text "Reaction",
                                            :confirms #{aidbox.sdc.fhir/coding},
                                            :enum [{:value {:display "Anaphylaxis", :code "39579001", :system "http://snomed.ct"}}
                                                   {:value {:display "Headache", :code "25064002", :system "http://snomed.ct"}}
                                                   {:value {:display "Hives (Wheal)", :code "247472004", :system "http://snomed.ct"}}
                                                   {:value {:display "Nausea", :code "422587007", :system "http://snomed.ct"}}
                                                   {:value {:display "Vomiting", :code "422400008", :system "http://snomed.ct"}}
                                                   {:value {:display "Other", :code "782197009", :system "http://snomed.ct"}}]}},
                         :other-reaction {:type zen/string,
                                          :text "Other reaction"},
                         :notes {:type zen/string,
                                 :text "Notes"}}}}}}
 AllergyInplaceForm
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/col
   :children
   [{:bind [:type]}
    {:bind [:reaction]}
    {:bind [:other-reaction]
     :sdc/display-when (> (count (matcho-filter (get-in [:reaction]) {:code "782197009"})) 0)}
    {:bind [:substance]}
    {:bind [:notes]}]}}

 AllergiesLayout
 {:zen/tags #{aidbox.sdc/Layout}
  :document AllergiesDocument
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/grid-editor
   :bind [:allergies]
   :new-form {:form-ref AllergyInplaceForm}
   :edit-form {:form-ref AllergyInplaceForm}
   :empty-widget {:type aidbox.sdc/label :label "No active allergies"}
   :columns [{:label "Agent / Substance"
              :type aidbox.sdc/label
              :bind [:substance :display]}
             {:label "Type"
              :type aidbox.sdc/label
              :bind [:type :display]}
             {:label "Reaction"
              :type aidbox.sdc/label
              :bind [:reaction 0 :display]}]
   :row-actions [{:type aidbox.sdc/grid-edit-button :label "Edit"}
                 {:label "Inactivate"
                  :type aidbox.sdc/set-value-button
                  :bind [:status]
                  :value "inactive"
                  :sdc/display-when (not (= "inactive" (get-in [:status])))}
                 {:label "Activate"
                  :type aidbox.sdc/set-value-button
                  :bind [:status]
                  :value "active"
                  :sdc/display-when (= "inactive" (get-in [:status]))}]}}

 AllergiesLaunch
 {:zen/tags #{aidbox.sdc/Launch}
  :document AllergiesDocument
  :params {:encounter-id {:type zen/string}}
  :populate-engine aidbox.sdc/LispPopulate
  :populate (let [patient (sql {:select [:#> :resource [:subject]]
                                :from :Encounter
                                :where [:= :id (get-in [:params :encounter-id])]})]
              {:author    (get-in [:ctx :user])
               :encounter {:id (get-in [:params :encounter-id])
                           :resourceType "Encounter"}
               :patient   patient
               :allergies
               (sql* {:select
                      {:allergy
                       ^:pg/obj {:id :id
                                 :substance [:#> :resource [:reaction 0 :substance :coding 0]]
                                 :status [:#>> :resource [:clinicalStatus :coding 0 :code]]
                                 :notes [:#>> :resource [:note 0 :text]]
                                 :type ^:pg/obj {:code [:#>> :resource [:code :coding 0 :code]]
                                                 :display [:#>> :resource [:code :coding 0 :display]]
                                                 :system [:#>> :resource [:code :coding 0 :system]]}
                                 :reaction ^:pg/fn [:to_jsonb [:pg/sql "knife_extract(resource#>'{reaction}', '[[\"manifestation\",0,\"coding\",0]]')"]]}}
                      :from :AllergyIntolerance
                      :where [:= [:#>> :resource [:patient :id]] (get patient :id)]})})}


 AllergiesFinalize
 {:zen/tags #{aidbox.sdc/Finalize zen/schema}
  :document AllergiesDocument
  :export-engine aidbox.sdc/LispExport
  :create [(for [i (get-in [:allergies])]
             {:id (get-in i [:id])
              :clinicalStatus {:coding [{:code (or (get-in i [:status]) "active")}]}
              :verificationStatus {:coding [{:code "confirmed"}]}
              :code {:coding [{:code (get-in i [:type :code])
                               :display (get-in i [:type :display])
                               :system (get-in i [:type :system])}]}
              :reaction (for [j (get-in i [:reaction])]
                          {:manifestation [{:coding [j]}]
                           :substance {:coding [(get-in i [:substance])]}})
              :note (when (get-in i [:notes])
                      [{:text (get-in i [:notes])}])
              :patient (get :patient)
              :encounter (get :encounter)
              :recordedDate (date)
              :resourceType "AllergyIntolerance"})]}

 AllergiesForm
 {:zen/tags #{aidbox.sdc/Form}
  :title    "Allergies"
  :version  "1.0.0"
  :document AllergiesDocument
  :layout   AllergiesLayout
  :launch   AllergiesLaunch
  :finalize AllergiesFinalize}}
