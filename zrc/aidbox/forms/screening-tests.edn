{ns aidbox.forms.screening-tests
 import #{zenbox aidbox.sdc aidbox.sdc.fhir}

 ScreeningTestsDocument
 {:zen/tags #{zen/schema aidbox.sdc/doc aidbox.sdc/rules}
  :zen/desc "Screening Tests"
  :type zen/map
  :confirms #{aidbox.sdc/Document}
  :sdc/rules {:age                   (period (get-in global [:patient :birthDate]) (date) :years)
              :one-frailty           (= (count (get :frailty/list)) 1)
              :one-advanced-illness  (= (count (get :advanced-illness/list)) 1)
              :use-nicotine          (get :smoking/use-nicotine)
              :pack-history-20       (get :smoking/pack-history-20)
              :has-diabetes          (get :diabetes/has-diabetes)

              :optional-osteoporosis (or (and (get :one-frailty)
                                              (<= (get :age) 85)
                                              (>= (get :age) 81))
                                         (and (get :one-advanced-illness)
                                              (get :one-frailty)
                                              (<= (get :age) 80)
                                              (>= (get :age) 67)))

              :osteoporosis-required (and (= (get-in [:patient :gender]) "female")
                                          (>= (get :age) 65))

              :osteoporosis-optional (or (and (= (get-in [:patient :gender]) "female")
                                              (<= (get :age) 65))
                                         (and (= (get-in [:patient :gender]) "male")
                                              (>= (get :age) 65)))

              :osteoporosis-required-final (and (get :osteoporosis-required)
                                                (not (get :optional-osteoporosis)))

              :osteoporosis-optional-final (or (get :osteoporosis-optional)
                                               (and (get :optional-osteoporosis)
                                                    (get :osteoporosis-required)))

              :optional-breast-cancer (and (= (get-in [:patient :gender]) "female")
                                           (get :one-advanced-illness)
                                           (get :one-frailty)
                                           (<= (get :age) 74)
                                           (>= (get :age) 66))

              :breast-cancer-required (and (= (get-in [:patient :gender]) "female")
                                           (<= (get :age) 74)
                                           (>= (get :age) 50))

              :breast-cancer-optional (and (= (get-in [:patient :gender]) "female")
                                           (<= (get :age) 49)
                                           (>= (get :age) 40))

              :breast-cancer-required-final (and (get :breast-cancer-required)
                                                 (not (get :optional-breast-cancer)))
              :breast-cancer-optional-final (or (get :breast-cancer-optional)
                                                (get :optional-breast-cancer)
                                                (get :breast-cancer-required))

              :optional-colon-cancer (and (get :one-advanced-illness)
                                          (get :one-frailty)
                                          (<= (get :age) 75)
                                          (>= (get :age) 66))

              :colon-cancer-required (and (<= (get :age) 75)
                                          (>= (get :age) 50))

              :colon-cancer-optional (or (and (<= (get :age) 49)
                                              (>= (get :age) 45))
                                         (and (<= (get :age) 86)
                                              (>= (get :age) 76)))

              :colon-cancer-required-final (and (get :colon-cancer-required)
                                                (not (get :optional-colon-cancer)))

              :colon-cancer-optional-final (or (get :colon-cancer-optional)
                                               (and (get :optional-colon-cancer)
                                                    (get :colon-cancer-required)))

              :optional-diabetic-retinal-exam (and (get :one-advanced-illness)
                                                   (get :one-frailty)
                                                   (<= (get :age) 75)
                                                   (>= (get :age) 66))

              :diabetic-retinal-exam-required (and (get :has-diabetes)
                                                   (<= (get :age) 75)
                                                   (>= (get :age) 18))

              :diabetic-retinal-exam-optional (get :has-diabetes)
              :diabetic-retinal-exam-required-final (and (get :diabetic-retinal-exam-required)
                                                         (not (get :optional-diabetic-retinal-exam)))
              :diabetic-retinal-exam-optional-final (or (get :diabetic-retinal-exam-optional)
                                                        (and (get :optional-diabetic-retinal-exam)
                                                             (get :diabetic-retinal-exam-required)))

              :optional-HbA1C (and (get :one-advanced-illness)
                                   (get :one-frailty)
                                   (<= (get :age) 75)
                                   (>= (get :age) 66))

              :HbA1C-required (and (get :has-diabetes)
                                   (<= (get :age) 75)
                                   (>= (get :age) 18))

              :HbA1C-optional (get :has-diabetes)
              :HbA1C-required-final (and (get :HbA1C-required)
                                         (not (get :optional-HbA1C)))

              :HbA1C-optional-final (or (get :HbA1C-optional)
                                        (and (get :optional-HbA1C)
                                             (get :HbA1C-required)))}

  :keys {:patient {:type zen/map
                   :keys {:birthDate {:type zen/string}
                          :gender {:type zen/string}}}
         :current-form {:type zen/map
                        :keys {:name {:type zen/string}
                               :type {:type zen/string
                                      :enum [{:value "empty"}
                                             {:value "edit"}
                                             {:value "order"}
                                             {:value "details"}]}}}

         :colon-cancer
         {:type zen/map
          :keys {:specify-test {:text "Specify Test"
                                :confirms #{aidbox.sdc.fhir/coding}
                                :enum [{:value {:display "Colonoscopy", :code "Colonoscopy"}}
                                       {:value {:display "Cologuard", :code "Cologuard"}}
                                       {:value {:display "FIT", :code "FIT"}}
                                       {:value {:display "gFOBT", :code "gFOBT"}}
                                       {:value {:display "Sigmoidoscopy", :code "Sigmoidoscopy"}}
                                       {:value {:display "CT Colonography", :code "CT Colonography"}}]}

                 :last-date {:text "Last Date" :type zen/datetime}
                 :result {:text "Result"
                          :confirms #{aidbox.sdc.fhir/coding}
                          :enum [{:value {:display "Normal", :code "Normal"}}
                                 {:value {:display "Abnormal", :code "Abnormal"}}]}
                 :comments {:text "Comments"
                            :type zen/string}}}

         :colon-cancer-order
         {:type zen/map
          :keys {:specify-test {:text "Select Screening Test"
                                :confirms #{aidbox.sdc.fhir/coding}
                                :enum [{:value {:display "FIT", :code "FIT"}}
                                       {:value {:display "Cologuard", :code "Cologuard"}}
                                       {:value {:display "Colonoscopy", :code "Colonoscopy"}}]}}}

         :breast-cancer
         {:type zen/map
          :keys {:last-date {:text "Last Date" :type zen/datetime}
                 :result {:text "Result"
                          :confirms #{aidbox.sdc.fhir/coding}
                          :enum [{:value {:display "Normal", :code "Normal"}}
                                 {:value {:display "Abnormal", :code "Abnormal"}}]}
                 :comments {:text "Comments" :type zen/string}}}
         :breast-cancer-order {:type zen/boolean}

         :cervical-cancer
         {:type zen/map
          :keys {:specify-test {:text "Specify Test"
                                :confirms #{aidbox.sdc.fhir/coding}
                                :enum [{:value {:display "Cytology", :code "Cytology"}}
                                       {:value {:display "hrHPV", :code "hrHPV"}}
                                       {:value {:display "Cytology & hrHPV", :code "Cytology & hrHPV"}}]}
                 :last-date {:type zen/datetime :text "Last Date"}
                 :result {:text "Result"
                          :confirms #{aidbox.sdc.fhir/coding}
                          :enum [{:value {:display "Normal", :code "Normal"}}
                                 {:value {:display "Abnormal", :code "Abnormal"}}]}
                 :comments {:text "Comments"
                            :type zen/string}}}

         :cervical-cancer-order
         {:type zen/boolean}

         :osteoporosis
         {:type zen/map
          :keys {:specify-test {:text "Specify Test"
                                :confirms #{aidbox.sdc.fhir/coding}
                                :enum [{:value {:display "Central DXA", :code "Central DXA"}}
                                       {:value {:display "Peripheral DXA", :code "Peripheral DXA"}}
                                       {:value {:display "Quantitative US", :code "Quantitative US"}}]}
                 :last-date {:text "Last Date" :type zen/datetime}
                 :result {:text "Result"
                          :confirms #{aidbox.sdc.fhir/coding}
                          :enum [{:value {:display "Normal", :code "Normal"}}
                                 {:value {:display "Osteopenia", :code "Osteopenia"}}
                                 {:value {:display "Osteoporosis", :code "Osteoporosis"}}]}
                 :tscore {:text "T-score"
                          :confirms #{aidbox.sdc.fhir/coding}
                          :enum [{:value {:display "-2.49 to -2.00", :code "-2.49 to -2.00"}}
                                 {:value {:display "-1.99 to -1.50", :code "-1.99 to -1.50"}}
                                 {:value {:display "-1.49 to -1.00", :code "-1.49 to -1.00"}}]}
                 :comments {:text "Comments" :type zen/string}}}

         :osteoporosis-order {:type zen/boolean}

         :lung-cancer
         {:type zen/map
          :keys {:last-date {:text "Last Date" :type zen/datetime}
                 :result {:text "Result"
                          :confirms #{aidbox.sdc.fhir/coding}
                          :enum [{:value {:display "Normal", :code "Normal"}}
                                 {:value {:display "Abnormal", :code "Abnormal"}}]}
                 :comments {:text "Comments" :type zen/string}}}

         :lung-cancer-order {:type zen/boolean}

         :abdominal-aortic-aneurysm
         {:type zen/map
          :keys {:last-date {:text "Last Date" :type zen/datetime}
                 :result {:text "Result"
                          :confirms #{aidbox.sdc.fhir/coding}
                          :enum [{:value {:display "Normal", :code "Normal"}}
                                 {:value {:display "Abnormal", :code "Abnormal"}}]}
                 :comments {:text "Comments" :type zen/string}}}

         :abdominal-aortic-aneurysm-order {:type zen/boolean}

         :diabetic-retinal-exam
         {:type zen/map
          :keys {:last-date {:text "Last Date" :type zen/datetime}
                 :result {:text "Result"
                          :confirms #{aidbox.sdc.fhir/coding}
                          :enum [{:value {:display "Normal", :code "Normal"}}
                                 {:value {:display "Abnormal", :code "Abnormal"}}]}
                 :comments {:text "Comments" :type zen/string}}}

         :diabetic-retinal-exam-order {:type zen/boolean}

         :eGFR {:type zen/map
                :keys {:last-date {:text "Last Date" :type zen/datetime}
                       :result {:text "Result"
                                :confirms #{aidbox.sdc.fhir/quantity}
                                :units [{:name "mL/min/1.73 m²"}]}
                       :comments {:text "Comments" :type zen/string}}}

         :eGFR-add-to-plan {:type zen/boolean}

         :HbA1C {:type zen/map
                 :keys {:last-date {:text "Last Date" :type zen/datetime}
                        :result {:text "Result"
                                 :confirms #{aidbox.sdc.fhir/quantity}
                                 :units [{:name "%"}]}
                        :comments {:text "Comments" :type zen/string}}}

         :HbA1C-add-to-plan {:type zen/boolean}

         :microalbumin
         {:type zen/map
          :keys {:last-date {:text "Last Date" :type zen/datetime}
                 :result {:text "Result"
                          :units [{:name "mg/dL"}]
                          :confirms #{aidbox.sdc.fhir/quantity}}
                 :comments {:text "Comments" :type zen/string}}}

         :microalbumin-add-to-plan {:type zen/boolean}}}


 DefaultTestForm
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/fields
   :children
   [{:type aidbox.sdc/row
     :children [{:bind [:last-date]}
                {:bind [:result]}]}
    {:bind [:comments]}]}}

 QuantityTestForm
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/fields
   :children
   [{:type aidbox.sdc/row
     :children [{:bind [:last-date]}
                {:bind [:result]}]}
    {:bind [:comments]}]}}

 ColonCancerForm
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/fields
   :children
   [{:bind [:specify-test]}
    {:type aidbox.sdc/row
     :children [{:bind [:last-date]}
                {:bind [:result]}]}
    {:bind [:comments]}]}}

 ColonCancerOrderForm
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/fields
   :children [{:bind [:specify-test]}]}}

 CervicalCancerForm
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/fields
   :children
   [{:bind [:specify-test]}
    {:type aidbox.sdc/row
     :children [{:bind [:last-date]}
                {:bind [:result]}]}
    {:bind [:comments]}]}}

 OsteoporosisForm
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/fields
   :children
   [{:bind [:specify-test]}
    {:type aidbox.sdc/row
     :children [{:bind [:last-date]}
                {:bind [:result]}]}
    {:bind [:tscore] :sdc/display-when (= (get-in [:result :code]), "Osteopenia")}
    {:bind [:comments]}]}}

 RowDetails
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/fields
   :children [{:type aidbox.sdc/label :bind [:comments]}]}}

 ScreeningTestsLayout
 {:zen/tags #{aidbox.sdc/Layout aidbox.sdc/rules}
  :document ScreeningTestsDocument
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/fields
   :children
   [{:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/row
       :children [{:type aidbox.sdc/label :label "**Colon Cancer**"}
                  {:type aidbox.sdc/label :bind [:colon-cancer :last-date]}
                  {:type aidbox.sdc/label :bind [:colon-cancer :result :display]}
                  {:type aidbox.sdc/row
                   :children
                   [{:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "colon-cancer" :type "details"})
                     :value {:name "empty" :type "empty"}
                     :bind [:current-form]
                     :label "Hide details"}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "colon-cancer" :type "details"}))
                     :bind [:current-form]
                     :label "Details"
                     :value {:name "colon-cancer" :type "details"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "colon-cancer" :type "order"}))
                     :bind [:current-form]
                     :label "Order"
                     :value {:name "colon-cancer" :type "order"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get-in [:current-form]) {:name "colon-cancer" :type "order"})
                     :bind [:current-form]
                     :label "Hide Order"
                     :value {:name "empty" :type "empty"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get-in [:current-form]) {:name "colon-cancer" :type "edit"}))
                     :bind [:current-form]
                     :label "Edit"
                     :value {:name "colon-cancer" :type "edit"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get-in [:current-form]) {:name "colon-cancer" :type "edit"})
                     :bind [:current-form]
                     :label "Hide Edit"
                     :value {:name "empty" :type "empty"}}]}]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "colon-cancer" :type "details"})
       :form-ref RowDetails
       :bind [:colon-cancer]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "colon-cancer" :type "edit"})
       :form-ref ColonCancerForm
       :bind [:colon-cancer]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "colon-cancer" :type "order"})
       :form-ref ColonCancerOrderForm
       :bind [:colon-cancer-order]}]}

    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/row
       :children
       [{:type aidbox.sdc/label :label "**Breast Cancer**"}
        {:type aidbox.sdc/label :bind [:breast-cancer :last-date]}
        {:type aidbox.sdc/label :bind [:breast-cancer :result :display]}
        {:type aidbox.sdc/row
         :children [{:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "breast-cancer" :type "details"})
                     :bind [:current-form]
                     :label "Hide details"
                     :value {:name "empty" :type "empty"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "breast-cancer" :type "details"}))
                     :bind [:current-form]
                     :label "Details"
                     :value {:name "breast-cancer" :type "details"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (get-in [:breast-cancer-order]))
                     :bind [:breast-cancer-order]
                     :label "Order"
                     :value true}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get-in [:breast-cancer-order]) true)
                     :bind [:breast-cancer-order]
                     :label "Cancel Order"
                     :value false}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "breast-cancer" :type "edit"}))
                     :bind [:current-form]
                     :label "Edit"
                     :value {:name "breast-cancer" :type "edit"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "breast-cancer" :type "edit"})
                     :bind [:current-form]
                     :label "Hide Edit"
                     :value {:name "empty" :type "empty"}}]}]}

      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "breast-cancer" :type "details"})
       :form-ref RowDetails
       :bind [:breast-cancer]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "breast-cancer" :type "edit"})
       :form-ref DefaultTestForm
       :bind [:breast-cancer]}
      ]}

    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/row
       :children
       [{:type aidbox.sdc/label :label "**Cervical Cancer**"}
        {:type aidbox.sdc/label :bind [:cervical-cancer :last-date]}
        {:type aidbox.sdc/label :bind [:cervical-cancer :result :display]}
        {:type aidbox.sdc/row
         :children
         [{:type aidbox.sdc/set-value-button
           :sdc/display-when (= (get :current-form) {:name "cervical-cancer" :type "details"})
           :bind [:current-form]
           :label "Hide details"
           :value {:name "empty" :type "empty"}}
          {:type aidbox.sdc/set-value-button
           :sdc/display-when (not (= (get :current-form) {:name "cervical-cancer" :type "details"}))
           :bind [:current-form]
           :label "Details"
           :value {:name "cervical-cancer" :type "details"}}
          {:type aidbox.sdc/set-value-button
           :bind [:cervical-cancer-order]
           :sdc/display-when (not (get :cervical-cancer-order))
           :label "Order"
           :value true}
          {:type aidbox.sdc/set-value-button
           :bind [:cervical-cancer-order]
           :sdc/display-when (get :cervical-cancer-order)
           :label "Cancel Order"
           :value false}
          {:type aidbox.sdc/set-value-button
           :sdc/display-when (not (= (get :current-form) {:name "cervical-cancer" :type "edit"}))
           :bind [:current-form]
           :label "Edit"
           :value {:name "cervical-cancer" :type "edit"}}
          {:type aidbox.sdc/set-value-button
           :sdc/display-when (= (get :current-form) {:name "cervical-cancer" :type "edit"})
           :bind [:current-form]
           :label "Hide Edit"
           :value {:name "empty" :type "empty"}}]}]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "cervical-cancer" :type "details"})
       :form-ref RowDetails
       :bind [:cervical-cancer]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "cervical-cancer" :type "edit"})
       :form-ref CervicalCancerForm
       :bind [:cervical-cancer]}]}

    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/row
       :children
       [{:type aidbox.sdc/label :label "**Osteoporosis**"}
        {:type aidbox.sdc/label :bind [:osteoporosis :last-date]}
        {:type aidbox.sdc/label :bind [:osteoporosis :result :display]}
        {:type aidbox.sdc/row
         :children [{:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "osteoporosis" :type "details"})
                     :bind [:current-form]
                     :value {:name "empty" :type "empty"}
                     :label "Hide details"}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "osteoporosis" :type "details"}))
                     :bind [:current-form]
                     :label "Details"
                     :value {:name "osteoporosis" :type "details"}}
                    {:type aidbox.sdc/set-value-button
                     :bind [:osteoporosis-order]
                     :sdc/display-when (not (get :osteoporosis-order))
                     :label "Order"
                     :value true}
                    {:type aidbox.sdc/set-value-button
                     :bind [:osteoporosis-order]
                     :sdc/display-when (get :osteoporosis-order)
                     :label "Cancel Order"
                     :value false}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "osteoporosis" :type "edit"}))
                     :bind [:current-form]
                     :label "Edit"
                     :value {:name "osteoporosis" :type "edit"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "osteoporosis" :type "edit"})
                     :bind [:current-form]
                     :label "Hide Edit"
                     :value {:name "empty" :type "empty"}}]}]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "osteoporosis" :type "details"})
       :form-ref RowDetails
       :bind [:osteoporosis]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "osteoporosis" :type "edit"})
       :form-ref OsteoporosisForm
       :bind [:osteoporosis]}]}

    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/row
       :children
       [{:type aidbox.sdc/label :label "**Lung Cancer**"}
        {:type aidbox.sdc/label :bind [:lung-cancer :last-date]}
        {:type aidbox.sdc/label :bind [:lung-cancer :result :display]}
        {:type aidbox.sdc/row
         :children [{:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "lung-cancer" :type "details"})
                     :bind [:current-form]
                     :label "Hide details"
                     :value {:name "empty" :type "empty"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "lung-cancer" :type "details"}))
                     :bind [:current-form]
                     :label "Details"
                     :value {:name "lung-cancer" :type "details"}}
                    {:type aidbox.sdc/set-value-button
                     :bind [:lung-cancer-order]
                     :sdc/display-when (not (get :lung-cancer-order))
                     :label "Order"
                     :value true}
                    {:type aidbox.sdc/set-value-button
                     :bind [:lung-cancer-order]
                     :sdc/display-when (get :lung-cancer-order)
                     :label "Cancel Order"
                     :value false}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "lung-cancer" :type "edit"}))
                     :bind [:current-form]
                     :label "Edit"
                     :value {:name "lung-cancer" :type "edit"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "lung-cancer" :type "edit"})
                     :bind [:current-form]
                     :label "Hide Edit"
                     :value {:name "empty" :type "empty"}}]}]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "lung-cancer" :type "details"})
       :form-ref RowDetails
       :bind [:lung-cancer]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "lung-cancer" :type "edit"})
       :form-ref DefaultTestForm
       :bind [:lung-cancer]}]}

    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/row
       :children
       [{:type aidbox.sdc/label :label "**Abdominal Aortic Aneurysm**"}
        {:type aidbox.sdc/label :bind [:abdominal-aortic-aneurysm :last-date]}
        {:type aidbox.sdc/label :bind [:abdominal-aortic-aneurysm :result :display]}
        {:type aidbox.sdc/row
         :children [{:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "abdominal-aortic-aneurysm" :type "details"})
                     :bind [:current-form]
                     :label "Hide details"
                     :value {:name "empty" :type "empty"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "abdominal-aortic-aneurysm" :type "details"}))
                     :bind [:current-form]
                     :label "Details"
                     :value {:name "abdominal-aortic-aneurysm" :type "details"}}
                    {:type aidbox.sdc/set-value-button
                     :bind [:abdominal-aortic-aneurysm-order]
                     :sdc/display-when (not (get :abdominal-aortic-aneurysm-order))
                     :label "Order"
                     :value true}
                    {:type aidbox.sdc/set-value-button
                     :bind [:abdominal-aortic-aneurysm-order]
                     :sdc/display-when (get :abdominal-aortic-aneurysm-order)
                     :label "Cancel Order"
                     :value false}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "abdominal-aortic-aneurysm" :type "edit"}))
                     :bind [:current-form]
                     :label "Edit"
                     :value {:name "abdominal-aortic-aneurysm" :type "edit"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "abdominal-aortic-aneurysm" :type "edit"})
                     :bind [:current-form]
                     :label "Hide Edit"
                     :value {:name "empty" :type "empty"}}]}]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "abdominal-aortic-aneurysm" :type "details"})
       :form-ref RowDetails
       :bind [:abdominal-aortic-aneurysm]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "abdominal-aortic-aneurysm" :type "edit"})
       :form-ref DefaultTestForm
       :bind [:abdominal-aortic-aneurysm]}]}

    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/row
       :children [{:type aidbox.sdc/label :label "**Diabetic Retinal Exam**"}
                  {:type aidbox.sdc/label :bind [:diabetic-retinal-exam :last-date]}
                  {:type aidbox.sdc/label :bind [:diabetic-retinal-exam :result :display]}
                  {:type aidbox.sdc/row
                   :children [{:type aidbox.sdc/set-value-button
                               :sdc/display-when (= (get :current-form) {:name "diabetic-retinal-exam" :type "details"})
                               :bind [:current-form]
                               :label "Hide details"
                               :value {:name "empty" :type "empty"}}
                              {:type aidbox.sdc/set-value-button
                               :sdc/display-when (not (= (get :current-form) {:name "diabetic-retinal-exam" :type "details"}))
                               :bind [:current-form]
                               :label "Details"
                               :value {:name "diabetic-retinal-exam" :type "details"}}
                              {:type aidbox.sdc/set-value-button
                               :bind [:diabetic-retinal-exam-order]
                               :sdc/display-when (not (get :diabetic-retinal-exam-order))
                               :label "Order"
                               :value true}
                              {:type aidbox.sdc/set-value-button
                               :bind [:diabetic-retinal-exam-order]
                               :sdc/display-when (get :diabetic-retinal-exam-order)
                               :label "Cancel Order"
                               :value false}
                              {:type aidbox.sdc/set-value-button
                               :sdc/display-when (not (= (get :current-form) {:name "diabetic-retinal-exam" :type "edit"}))
                               :bind [:current-form]
                               :label "Edit"
                               :value {:name "diabetic-retinal-exam" :type "edit"}}
                              {:type aidbox.sdc/set-value-button
                               :sdc/display-when (= (get :current-form) {:name "diabetic-retinal-exam" :type "edit"})
                               :bind [:current-form]
                               :label "Hide Edit"
                               :value {:name "empty" :type "empty"}}]}]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "diabetic-retinal-exam" :type "details"})
       :form-ref RowDetails
       :bind [:diabetic-retinal-exam]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "diabetic-retinal-exam" :type "edit"})
       :form-ref DefaultTestForm
       :bind [:diabetic-retinal-exam]}]}

    ;; eGFR
    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/row
       :children [{:type aidbox.sdc/label :label "**eGFR**"}
                  {:type aidbox.sdc/label :bind [:eGFR :last-date]}
                  {:type aidbox.sdc/label :bind [:eGFR :result :value]}
                  {:type aidbox.sdc/row
                   :children
                   [{:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "eGFR" :type "details"})
                     :bind [:current-form]
                     :label "Hide details"
                     :value {:name "empty" :type "empty"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "eGFR" :type "details"}))
                     :bind [:current-form]
                     :label "Details"
                     :value {:name "eGFR" :type "details"}}
                    {:type aidbox.sdc/set-value-button
                     :bind [:eGFR-add-to-plan]
                     :sdc/display-when (not (get :eGFR-add-to-plan))
                     :label "Add to plan"
                     :value true}
                    {:type aidbox.sdc/set-value-button
                     :bind [:eGFR-add-to-plan]
                     :sdc/display-when (get :eGFR-add-to-plan)
                     :label "Remove from plan"
                     :value false}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "eGFR" :type "edit"}))
                     :bind [:current-form]
                     :label "Edit"
                     :value {:name "eGFR" :type "edit"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "eGFR" :type "edit"})
                     :bind [:current-form]
                     :label "Hide Edit"
                     :value {:name "empty" :type "empty"}}]}]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "eGFR" :type "details"})
       :form-ref RowDetails
       :bind [:eGFR]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "eGFR" :type "edit"})
       :form-ref QuantityTestForm
       :bind [:eGFR]}]}

    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/row
       :children [{:type aidbox.sdc/label :label "**HbA1C**"}
                  {:type aidbox.sdc/label :bind [:HbA1C :last-date]}
                  {:type aidbox.sdc/label :bind [:HbA1C :result :value]}
                  {:type aidbox.sdc/row
                   :children
                   [{:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "HbA1C" :type "details"})
                     :bind [:current-form]
                     :label "Hide details"
                     :value {:name "empty" :type "empty"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "HbA1C" :type "details"}))
                     :bind [:current-form]
                     :label "Details"
                     :value {:name "HbA1C" :type "details"}}
                    {:type aidbox.sdc/set-value-button
                     :bind [:HbA1C-add-to-plan]
                     :sdc/display-when (not (get :HbA1C-add-to-plan))
                     :label "Add to plan"
                     :value true}
                    {:type aidbox.sdc/set-value-button
                     :bind [:HbA1C-add-to-plan]
                     :sdc/display-when (get :HbA1C-add-to-plan)
                     :label "Remove from plan"
                     :value false}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (not (= (get :current-form) {:name "HbA1C" :type "edit"}))
                     :bind [:current-form]
                     :label "Edit"
                     :value {:name "HbA1C" :type "edit"}}
                    {:type aidbox.sdc/set-value-button
                     :sdc/display-when (= (get :current-form) {:name "HbA1C" :type "edit"})
                     :bind [:current-form]
                     :label "Hide Edit"
                     :value {:name "empty" :type "empty"}}]}]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "HbA1C" :type "details"})
       :form-ref RowDetails
       :bind [:HbA1C]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "HbA1C" :type "edit"})
       :form-ref QuantityTestForm
       :bind [:HbA1C]}]}

    {:type aidbox.sdc/fields
     :children
     [{:type aidbox.sdc/row
       :children
       [{:type aidbox.sdc/label :label "**Microalbumin:Creatinine Ratio**"}
        {:type aidbox.sdc/label :bind [:microalbumin :last-date]}
        {:type aidbox.sdc/label :bind [:microalbumin :result :value]}
        {:type aidbox.sdc/row
         :children
         [{:type aidbox.sdc/set-value-button
           :sdc/display-when (= (get :current-form) {:name "microalbumin" :type "details"})
           :bind [:current-form]
           :label "Hide details"
           :value {:name "empty" :type "empty"}}
          {:type aidbox.sdc/set-value-button
           :sdc/display-when (not (= (get :current-form) {:name "microalbumin" :type "details"}))
           :bind [:current-form]
           :label "Details"
           :value {:name "microalbumin" :type "details"}}
          {:type aidbox.sdc/set-value-button
           :bind [:microalbumin-add-to-plan]
           :sdc/display-when (not (get :microalbumin-add-to-plan))
           :label "Add to plan"
           :value true}
          {:type aidbox.sdc/set-value-button
           :bind [:microalbumin-add-to-plan]
           :sdc/display-when (get :microalbumin-add-to-plan)
           :label "Remove from plan"
           :value false}
          {:type aidbox.sdc/set-value-button
           :sdc/display-when (not (= (get :current-form) {:name "microalbumin" :type "edit"}))
           :bind [:current-form]
           :label "Edit"
           :value {:name "microalbumin" :type "edit"}}
          {:type aidbox.sdc/set-value-button
           :sdc/display-when (= (get :current-form) {:name "microalbumin" :type "edit"})
           :bind [:current-form]
           :label "Hide Edit"
           :value {:name "empty" :type "empty"}}]}]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "microalbumin" :type "details"})
       :form-ref RowDetails
       :bind [:microalbumin]}
      {:type aidbox.sdc/subform
       :sdc/display-when (= (get :current-form) {:name "microalbumin" :type "edit"})
       :form-ref QuantityTestForm
       :bind [:microalbumin]}]}]}}

 ScreeningTestsLaunch
 {:zen/tags #{aidbox.sdc/Launch}
  :document ScreeningTestsDocument
  :params {:encounter-id {:type zen/string}}
  :populate-engine aidbox.sdc/LispPopulate
  :populate {:author    (get-in [:ctx :user])
             :encounter {:id (get-in [:params :encounter-id]) :resourceType "Encounter"}
             :patient   (sql {:select {:patient ^:pg/obj {:id :id
                                                          :resourceType "Patient"
                                                          :gender [:#> :resource [:gender]]
                                                          :birthDate [:#> :resource [:birthDate]]}}
                              :from :Patient
                              :where [:= :id (sql {:select [:#> :resource [:subject :id]]
                                                   :from :Encounter
                                                   :where [:= :id (get-in [:params :encounter-id])]})]})}}


 ScreeningTestsFinalizeConstraints
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:colon-cancer              {:type zen/map
                                     :require #{:specify-test :last-date :result}}
         ;; :colon-cancer-order        {:type zen/map
         ;;                             :require #{:specify-test}}
         :breast-cancer             {:type zen/map
                                     :require #{:last-date :result}}
         :osteoporosis              {:type zen/map
                                     :require #{:specify-test :last-date :result}}
         :lung-cancer               {:type zen/map
                                     :require #{:last-date :result}}
         :abdominal-aortic-aneurysm {:type zen/map
                                     :require #{:last-date :result}}
         :diabetic-retinal-exam     {:type zen/map
                                     :require #{:last-date :result}}
         :eGFR                      {:type zen/map
                                     :require #{:last-date :result}}
         :HbA1C                     {:type zen/map
                                     :require #{:last-date :result}}
         :microalbumin              {:type zen/map
                                     :require #{:last-date :result}}
         }}

 ScreeningTestsFinalize
 {:zen/tags #{aidbox.sdc/Finalize zen/schema}
  :document ScreeningTestsDocument
  :profile ScreeningTestsFinalizeConstraints
  :export-engine aidbox.sdc/LispExport
  :create []}

 ScreeningTestsForm
 {:zen/tags #{aidbox.sdc/Form}
  :title    "Screening Tests"
  :document ScreeningTestsDocument
  :layout   ScreeningTestsLayout
  :launch   ScreeningTestsLaunch
  :finalize ScreeningTestsFinalize}}
