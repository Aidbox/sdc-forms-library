{ns aidbox.forms.mini-cognitive-test
 import #{zenbox aidbox.sdc aidbox.sdc.fhir}

 MiniCognitiveDocument
 {:zen/tags #{zen/schema aidbox.sdc/doc aidbox.sdc/rules}
  :zen/desc "Mini Cognitive Test"
  :help "**Instructions:**

**Three Word Registration**  
Look directly at patient and say, “Please listen carefully, I am going to say three words I want you to repeat back to me now and try to remember. The words are [select a list of words].  Please say them for me now.” If patient is unable to repeat after 3 attempts, move on to next step.  
*For repeated administrations, use of an alternative word list is recommended.*

**Clock Drawing**  
Say: “Next, I want you to draw a clock for me. First, put in all of the numbers where they go.” When that is completed, say: “Now, set the hands to 10 past 11.” Use preprinted circle for this exercise. Repeat instructions as needed as this is not a memory test. Move to next step if the clock is not complete within three minutes.

**Three Word Recall**  
Ask the person to recall the three words you stated in Step 1. Say: “What were the three words I asked you to remember?” Record the total number of words patient recalled correctly."
  :type zen/map
  :confirms #{aidbox.sdc/Document}
  :sdc/rules {:mini-cognitive-test-score
              (+ (get-in [:mini-cognitive-test-3 :score])
                 (get-in [:mini-cognitive-test-4 :score]))

              :mini-cognitive-test-score-interp
              (cond (<= 0 (get :mini-cognitive-test-score) 2)
                    {:display "Positive", :code "severe"},
                    (<= 3 (get :mini-cognitive-test-score) 99)
                    {:display "Negative", :code "minimal"}
                    :else nil)}
  :keys {:mini-cognitive-test-1 {:text "**Three Word Registration**"
                                 :confirms #{aidbox.sdc.fhir/coding}
                                 ;; TODO Remove text in round brackets and move it to help messages
                                 :help "Set 1 - Banana,Sunrise,Chair\n
Set 2 - Leader,Season,Table\n
Set 3 - Village,Kitchen,Baby\n
Set 4 - River,Nation,Finger\n
Set 5 - Captain,Garden,Picture\n
Set 6 - Daughter,Heaven,Mountain"
                                 :enum [{:value {:display "Set 1", :code "mini-cognitive-test-set-1"}}
                                        {:value {:display "Set 2", :code "mini-cognitive-test-set-2"}}
                                        {:value {:display "Set 3", :code "mini-cognitive-test-set-3"}}
                                        {:value {:display "Set 4", :code "mini-cognitive-test-set-4"}}
                                        {:value {:display "Set 5", :code "mini-cognitive-test-set-5"}}
                                        {:value {:display "Set 6", :code "mini-cognitive-test-set-6"}}],
                                 }
         ;; :mini-cognitive-test-2 {:zen/desc "**Clock Drawing**"
         ;;                         :type zen/vector
         ;;                         :every {:confirms #{hl7-fhir-r4-core.Attachment/schema}}}
         :mini-cognitive-test-3 {:text "Can patient draw 45 minutes past 10 on a clock?"
                                 :confirms #{aidbox.sdc.fhir/coding}
                                 :enum [{:value {:display "Yes" :code "mini-cognitive-test-clock-1" :score 2}}
                                        {:value {:display "No" :code "mini-cognitive-test-clock-0" :score 0}}
                                        {:value {:display "Unable to assess" :code "mini-cognitive-test-clock-3" :score 0}}]}
         :mini-cognitive-test-4 {:text "**Three Word Recall**"
                                 :confirms #{aidbox.sdc.fhir/coding}
                                 :enum [{:value {:display "None" :code "mini-cognitive-test-recall-0" :score 0}}
                                        {:value {:display "1 out of 3" :code "mini-cognitive-test-recall-1" :score 1}}
                                        {:value {:display "2 out of 3" :code "mini-cognitive-test-recall-2" :score 2}}
                                        {:value {:display "3 out of 3" :code "mini-cognitive-test-recall-3" :score 3}}]}
         :mini-cognitive-test-score {:text "Cognitive Assessment Score"
                                     :type zen/number}
         :mini-cognitive-test-score-interp {:text "Cognitive Assessment Score Interpretation"
                                            :enum [{:value {:display "Positive", :code "severe"}},
                                                   {:value {:display "Negative", :code "minimal"}}]}
         }}

 MiniCognitiveLayout
 {:zen/tags #{aidbox.sdc/Layout}
  :document MiniCognitiveDocument
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/col
   :children
   [{:bind [:mini-cognitive-test-1]}
    ;; {:bind [:mini-cognitive-test-2]}
    {:bind [:mini-cognitive-test-3]}
    {:bind [:mini-cognitive-test-4]}
    {:bind [:mini-cognitive-test-score]}
    {:bind [:mini-cognitive-test-score-interp]}]}}

 MiniCognitiveLaunch
 {:zen/tags #{aidbox.sdc/Launch}
  :document MiniCognitiveDocument
  :params {:encounter-id {:type zen/string}}
  :populate-engine aidbox.sdc/LispPopulate
  :populate {:author    (get-in [:ctx :user])
             :encounter {:id (get-in [:params :encounter-id]) :resourceType "Encounter"}
             :patient   (sql {:select [:#> :resource [:subject]]
                              :from :Encounter
                              :where [:= :id (get-in [:params :encounter-id])]})}}

 MiniCognitiveForm
 {:zen/tags #{aidbox.sdc/Form}
  :title    "Mini Cognitive Test"
  :document MiniCognitiveDocument
  :layout   MiniCognitiveLayout
  :launch   MiniCognitiveLaunch}}
