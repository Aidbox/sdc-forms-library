{ns aidbox.forms.problems-list
 import #{zenbox aidbox.sdc  aidbox.sdc.fhir aidbox.forms.vs.problems-list}

 Condition
 {:zen/tags #{zen/schema aidbox.sdc/super-field}
  :type zen/map,
  :require #{:problem}
  :keys {:id             {:type zen/string}
         :category       {:type zen/map
                          :keys {:text {:type zen/string}
                                 :code {:type zen/string}}}
         :problem        {:text "Condition"
                          :confirms #{aidbox.sdc.fhir/coding}
                          :sdc/options aidbox.sdc.options/valueset
                          :valueset "forms.snomed-problems-list-vs"}
         :clinicalStatus {:text "Clinical Status"
                          :type zen/string
                          :sdc/default-value "active"}
         :onsetDateTime  {:text "Onset date (optional)" :type zen/date}
         :comments       {:text "Comments"
                          :type zen/string
                          :sdc-type aidbox.sdc/text}
         :duplicates     {:type zen/vector
                          :every {:text "Duplicates" :confirms #{aidbox.sdc.fhir/coding}}}
         :showDetails    {:type zen/boolean}}}

 ProblemsListDocument
 {:zen/tags #{zen/schema aidbox.sdc/doc aidbox.sdc/rules}
  :zen/desc "Problems"
  :type zen/map
  :confirms #{aidbox.sdc/Document}
  :keys {:patient {:type zen/map
                   :keys {:birthDate {:type zen/string}
                          :gender {:type zen/string}}}
         :conditions {:type zen/vector,
                      :every {:confirms #{Condition}}}}}



 ProblemsListLaunch
 {:zen/tags #{aidbox.sdc/Launch}
  :document ProblemsListDocument
  :params {:encounter-id {:type zen/string}}
  :populate-engine aidbox.sdc/LispPopulate
  :populate (let [patient-id (sql {:select [:#> :resource [:subject :id]]
                                   :from :Encounter
                                   :where [:= :id (get-in [:params :encounter-id])]})]
              {:author     (get-in [:ctx :user])
               :encounter  {:id (get-in [:params :encounter-id]) :resourceType "Encounter"}
               :patient    (sql {:select {:patient ^:pg/obj {:id :id
                                                             :resourceType "Patient"
                                                             :gender [:#> :resource [:gender]]
                                                             :birthDate [:#> :resource [:birthDate]]}}
                                 :from :Patient
                                 :where [:= :id patient-id]})
               :conditions (sql* {:select {:condition
                                           ^:pg/obj {:id :id
                                                     :problem [:#> :resource [:code :coding 0]]
                                                     :onsetDateTime [:#> :resource [:onset :dateTime]]
                                                     :comments [:#> :resource [:note 0 :text]]
                                                     :clinicalStatus [:#> :resource [:clinicalStatus :coding 0 :code]]
                                                     :showDetails false}}
                                  :from :Condition
                                  :where [:and
                                          [:= [:#>> :resource [:subject :id]] patient-id]
                                          [:= [:#>> :resource [:clinicalStatus :coding 0 :code]] "active"]
                                          [:= [:#>> :resource [:verificationStatus :coding 0 :code]] "confirmed"]]})})}


 ConditionInplaceForm
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/fields
   :children [{:bind [:problem]}
              {:type aidbox.sdc/row
               :children [{:type aidbox.sdc/col
                           :children [{:bind [:onsetDateTime]}]}
                          {:type aidbox.sdc/col}]}
              {:bind [:comments]}]}}

 ProblemDetails
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout {:type aidbox.sdc/fields
           :children [{:type aidbox.sdc/label
                       :bind [:comments]
                       :label "Comments"}]}}

 ProblemsListLayout
 {:zen/tags #{aidbox.sdc/Layout}
  :document ProblemsListDocument
  :engine aidbox.sdc/Hiccup
  :layout {:type aidbox.sdc/grid-editor
           :bind [:conditions]
           :columns    [{:label "Condition"
                         :type aidbox.sdc/fields
                         :children [{:type aidbox.sdc/label :bind [:problem :display]}]}
                        {:label "Onset date"
                         :type aidbox.sdc/label
                         :bind [:onsetDateTime]}]
           :row-actions [{:type aidbox.sdc/grid-edit-button :label "Edit"}]
           :new-form    {:form-ref ConditionInplaceForm}
           :edit-form   {:form-ref ConditionInplaceForm}
           :row-details {:form-ref ProblemDetails :sdc/display-when (get :comments)}}}


 ProblemsListFinalize
 {:zen/tags #{aidbox.sdc/Finalize zen/schema}
  :document ProblemsListDocument
  :export-engine aidbox.sdc/LispExport
  :patch [(for [j (sql* {:select  {:id :id}
                         :from :Condition
                         :where [:and
                                 (when (> (count (get-in [:conditions])) 0)
                                   [:not [:in :id [:pg/params-list (for [i (get-in [:conditions])] (str (get i :id)))]]])
                                 [:= [:#>> :resource [:subject :id]] (get-in [:patient :id])]
                                 [:= [:#>> :resource [:clinicalStatus :coding 0 :code]] "active"]
                                 [:= [:#>> :resource [:verificationStatus :coding 0 :code]] "confirmed"]]})]
            {:resourceType "Condition"
             :id j
             :verificationStatus {:coding [{:system "http://terminology.hl7.org/CodeSystem/condition-ver-status"
                                            :code "entered-in-error"}]}})]
  :create [(for [i (get-in [:conditions])]
             {:id (get-in i [:id])
              :resourceType "Condition"
              :clinicalStatus {:coding [{:code (get i :clinicalStatus) :system "http://terminology.hl7.org/CodeSystem/condition-clinical"}]}
              :verificationStatus {:coding [{:code "confirmed" :system "http://terminology.hl7.org/CodeSystem/condition-ver-status"}]}

              :category [{:coding [{:code "problem-list-item"
                                    :system "http://terminology.hl7.org/CodeSystem/condition-category"}]}

                         {:coding [{:system "urn:oid:2.16.840.1.113883.3.247.1.1"
                                    :code (get-in i [:problem :code])
                                    :display (get-in i [:problem :display])}]}]
              :code         {:coding [(get-in i [:problem])]
                             :text   (get-in i [:problem :display])}
              :onset        {:dateTime (get-in i [:onsetDateTime])}
              :subject      (select-keys (get :patient) [:id :resourceType])
              :encounter    (get :encounter)
              :recordedDate (date)
              :note         (when (get-in i [:comments])
                              [{:text (get-in i [:comments])}])})]}


 ProblemsListForm
 {:zen/tags #{aidbox.sdc/Form}
  :title    "Active Problems"
  :document ProblemsListDocument
  :layout   ProblemsListLayout
  :launch   ProblemsListLaunch
  :finalize ProblemsListFinalize}
 }
